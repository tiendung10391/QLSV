<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Understanding Data Type Differences</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="data type differences" /><meta name="Microsoft.Help.Id" content="ab8fa00f-cb16-47e2-94b8-3a76f56c2b84" /><meta name="Description" content="There are a number of differences between the Java programming language data types and SQL Server data types. The Microsoft JDBC Driver for SQL Server helps to facilitate those differences through various types of conversions." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Understanding Data Type Differences</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>There are a number of differences between the Java programming language data types and SQL Server data types. The Microsoft JDBC Driver for SQL Server helps to facilitate those differences through various types of conversions. </p></div><h1 class="heading">Character Types</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>The JDBC character string data types are <span sdata="langKeyword" value="CHAR"><span class="keyword">CHAR</span></span>, <span sdata="langKeyword" value="VARCHAR"><span class="keyword">VARCHAR</span></span>, and <span sdata="langKeyword" value="LONGVARCHAR"><span class="keyword">LONGVARCHAR</span></span>. The JDBC driver provides support for the JDBC 4.0 API. In the JDBC 4.0, the JDBC character string data types can also be <span sdata="langKeyword" value="NCHAR"><span class="keyword">NCHAR</span></span>, <span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span>, and <span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span>. These new character string types maintain Java native character types in Unicode format and remove the need to perform any ANSI-to-Unicode or Unicode-to-ANSI conversion.</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>Type</p></th><th><p>Description</p></th></tr><tr><td><p>Fixed-length</p></td><td><p>The SQL Server <span sdata="langKeyword" value="char"><span class="keyword">char</span></span> and <span sdata="langKeyword" value="nchar"><span class="keyword">nchar</span></span> data types map directly to the JDBC <span sdata="langKeyword" value="CHAR"><span class="keyword">CHAR</span></span> and <span sdata="langKeyword" value="NCHAR"><span class="keyword">NCHAR</span></span> types. These are fixed-length types with padding provided by the server in the case where the column has SET ANSI_PADDING ON. Padding is always turned on for <span sdata="langKeyword" value="nchar"><span class="keyword">nchar</span></span>, but for <span sdata="langKeyword" value="char"><span class="keyword">char</span></span>, in the case where the server char columns are not padded, the JDBC driver adds the padding.</p></td></tr><tr><td><p>Variable-length</p></td><td><p>The SQL Server <span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span> and <span sdata="langKeyword" value="nvarchar"><span class="keyword">nvarchar</span></span> types map directly to the JDBC <span sdata="langKeyword" value="VARCHAR"><span class="keyword">VARCHAR</span></span> and <span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> types, respectively.</p></td></tr><tr><td><p>Long</p></td><td><p>The SQL Server <span sdata="langKeyword" value="text"><span class="keyword">text</span></span> and <span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> types map to the JDBC <span sdata="langKeyword" value="LONGVARCHAR"><span class="keyword">LONGVARCHAR</span></span> and <span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span> type, respectively. These are deprecated types beginning in SQL Server 2005, so you should use large value types, <span sdata="langKeyword" value="varchar(max)"><span class="keyword">varchar(max)</span></span> or <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span>, instead.</p><p>Using the <b>update&lt;Numeric Type&gt;</b> and <a href="4993dfe1-2232-4b3c-b931-dfdb35dd225a.htm">updateObject (int, java.lang.Object)</a> methods will fail against <span sdata="langKeyword" value="text"><span class="keyword">text</span></span> and <span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> server columns. However, using the <a href="93a2b22c-82b4-48c7-a428-369ebe98a372.htm">setObject</a> method with a specified character conversion type is supported against <span sdata="langKeyword" value="text"><span class="keyword">text</span></span> and <span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> server columns.</p></td></tr></table></div></div><h1 class="heading">Binary String Types</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>The JDBC binary-string types are <span sdata="langKeyword" value="BINARY"><span class="keyword">BINARY</span></span>, <span sdata="langKeyword" value="VARBINARY"><span class="keyword">VARBINARY</span></span>, and <span sdata="langKeyword" value="LONGVARBINARY"><span class="keyword">LONGVARBINARY</span></span>. </p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>Type</p></th><th><p>Description</p></th></tr><tr><td><p>Fixed-length</p></td><td><p>The SQL Server <span sdata="langKeyword" value="binary"><span class="keyword">binary</span></span> type maps directly to the JDBC <span sdata="langKeyword" value="BINARY"><span class="keyword">BINARY</span></span> type. This is a fixed-length type with padding provided by the server in the case where the column has SET ANSI_PADDING ON. When the server char columns are not padded, the JDBC driver adds the padding.</p><p>The SQL Server <span sdata="langKeyword" value="timestamp"><span class="keyword">timestamp</span></span> type is a JDBC <span sdata="langKeyword" value="BINARY"><span class="keyword">BINARY</span></span> type with the fixed length of 8 bytes.</p></td></tr><tr><td><p>Variable-length</p></td><td><p>The SQL Server <span sdata="langKeyword" value="varbinary"><span class="keyword">varbinary</span></span> type maps to the JDBC <span sdata="langKeyword" value="VARBINARY"><span class="keyword">VARBINARY</span></span> type.</p><p>The <span sdata="langKeyword" value="udt"><span class="keyword">udt</span></span> type in SQL Server maps to JDBC as a <span sdata="langKeyword" value="VARBINARY"><span class="keyword">VARBINARY</span></span> type.</p></td></tr><tr><td><p>Long</p></td><td><p>The SQL Server <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> type maps to the JDBC <span sdata="langKeyword" value="LONGVARBINARY"><span class="keyword">LONGVARBINARY</span></span> type. This type is deprecated beginning in SQL Server 2005, so you should use a large value type, <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> instead.</p></td></tr></table></div></div><h1 class="heading">Exact Numeric Types</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>The JDBC exact numeric types map directly to their corresponding SQL Server types.</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>Type</p></th><th><p>Description</p></th></tr><tr><td><p>BIT</p></td><td><p>The JDBC <span sdata="langKeyword" value="BIT"><span class="keyword">BIT</span></span> type represents a single bit that can be 0 or 1. This maps to a SQL Server <span sdata="langKeyword" value="bit"><span class="keyword">bit</span></span> type.</p></td></tr><tr><td><p>TINYINT</p></td><td><p>The JDBC <span sdata="langKeyword" value="TINYINT"><span class="keyword">TINYINT</span></span> type represents a single byte. This maps to a SQL Server <span sdata="langKeyword" value="tinyint"><span class="keyword">tinyint</span></span> type.</p></td></tr><tr><td><p>SMALLINT</p></td><td><p>The JDBC <span sdata="langKeyword" value="SMALLINT"><span class="keyword">SMALLINT</span></span> type represents a signed 16-bit integer. This maps to a SQL Server <span sdata="langKeyword" value="smallint"><span class="keyword">smallint</span></span> type.</p></td></tr><tr><td><p>INTEGER</p></td><td><p>The JDBC <span sdata="langKeyword" value="INTEGER"><span class="keyword">INTEGER</span></span> type represents a signed 32-bit integer. This maps to a SQL Server <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> type.</p></td></tr><tr><td><p>BIGINT</p></td><td><p>The JDBC <span sdata="langKeyword" value="BIGINT"><span class="keyword">BIGINT</span></span> type represents a signed 64-bit integer. This maps to a SQL Server <span sdata="langKeyword" value="bigint"><span class="keyword">bigint</span></span> type.</p></td></tr><tr><td><p>NUMERIC</p></td><td><p>The JDBC <span sdata="langKeyword" value="NUMERIC"><span class="keyword">NUMERIC</span></span> type represents a fixed-precision decimal value that holds values of identical precision. The <span sdata="langKeyword" value="NUMERIC"><span class="keyword">NUMERIC</span></span> type maps to the SQL Server <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> type.</p></td></tr><tr><td><p>DECIMAL</p></td><td><p>The JDBC <span sdata="langKeyword" value="DECIMAL"><span class="keyword">DECIMAL</span></span> type represents a fixed-precision decimal value that holds values of at least the specified precision. The <span sdata="langKeyword" value="DECIMAL"><span class="keyword">DECIMAL</span></span> type maps to the SQL Server <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> type.</p><p>The JDBC <span sdata="langKeyword" value="DECIMAL"><span class="keyword">DECIMAL</span></span> type also maps to the SQL Server <span sdata="langKeyword" value="money"><span class="keyword">money</span></span> and <span sdata="langKeyword" value="smallmoney"><span class="keyword">smallmoney</span></span> types, which are specific fixed-precision decimal types that are stored in 8 and 4 bytes, respectively.</p></td></tr></table></div></div><h1 class="heading">Approximate Numeric Types</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>The JDBC approximate numeric types are <span sdata="langKeyword" value="REAL"><span class="keyword">REAL</span></span>, <span sdata="langKeyword" value="DOUBLE"><span class="keyword">DOUBLE</span></span>, and <span sdata="langKeyword" value="FLOAT"><span class="keyword">FLOAT</span></span>.</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>Type</p></th><th><p>Description</p></th></tr><tr><td><p>REAL</p></td><td><p>The JDBC <span sdata="langKeyword" value="REAL"><span class="keyword">REAL</span></span> type has seven digits of precision (single precision) and maps directly to the SQL Server <span sdata="langKeyword" value="real"><span class="keyword">real</span></span> type.</p></td></tr><tr><td><p>DOUBLE</p></td><td><p>The JDBC <span sdata="langKeyword" value="DOUBLE"><span class="keyword">DOUBLE</span></span> type has 15 digits of precision (double precision) and maps to the SQL Server <span sdata="langKeyword" value="float"><span class="keyword">float</span></span> type. The JDBC <span sdata="langKeyword" value="FLOAT"><span class="keyword">FLOAT</span></span> type is a synonym of <span sdata="langKeyword" value="DOUBLE"><span class="keyword">DOUBLE</span></span>. Because there can be confusion between <span sdata="langKeyword" value="FLOAT"><span class="keyword">FLOAT</span></span> and <span sdata="langKeyword" value="DOUBLE"><span class="keyword">DOUBLE</span></span>, <span sdata="langKeyword" value="DOUBLE"><span class="keyword">DOUBLE</span></span> is preferred.</p></td></tr></table></div></div><h1 class="heading">Datetime Types</h1><div id="sectionSection4" class="section" name="collapseableSection" style=""><p>The JDBC <span sdata="langKeyword" value="TIMESTAMP"><span class="keyword">TIMESTAMP</span></span> type maps to the SQL Server <span sdata="langKeyword" value="datetime"><span class="keyword">datetime</span></span> and <span sdata="langKeyword" value="smalldatetime"><span class="keyword">smalldatetime</span></span> types. The <span sdata="langKeyword" value="datetime"><span class="keyword">datetime</span></span> type is stored in two 4-byte integers. The <span sdata="langKeyword" value="smalldatetime"><span class="keyword">smalldatetime</span></span> type holds the same information (date and time), but with less accuracy, in two 2-byte small integers.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>The SQL Server <span sdata="langKeyword" value="timestamp"><span class="keyword">timestamp</span></span> type is a fixed-length binary-string type. It does not map to any of the JDBC time types: <span sdata="langKeyword" value="DATE"><span class="keyword">DATE</span></span>, <span sdata="langKeyword" value="TIME"><span class="keyword">TIME</span></span>, or <span sdata="langKeyword" value="TIMESTAMP"><span class="keyword">TIMESTAMP</span></span>.</p></div></div><h1 class="heading">Custom Type Mapping</h1><div id="sectionSection5" class="section" name="collapseableSection" style=""><p>The custom type mapping feature of JDBC that uses the <b>SQLData</b> interfaces for the JDBC advanced types (UDTs, Struct, and so on). is not implemented in the JDBC driver.</p></div><span id="seeAlsoSpan"><h1 class="heading">See Also</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">Understanding the JDBC Driver Data Types</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Send <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','01.00.12024.10000','%0\dThank%20you%20for%20your%20feedback.%20The%20developer%20writing%20teams%20use%20your%20feedback%20to%20improve%20documentation.%20While%20we%20are%20reviewing%20your%20feedback,%20we%20may%20send%20you%20e-mail%20to%20ask%20for%20clarification%20or%20feedback%20on%20a%20solution.%20We%20do%20not%20use%20your%20e-mail%20address%20for%20any%20other%20purpose%20and%20we%20delete%20it%20after%20we%20finish%20our%20review.%0\AFor%20further%20information%20about%20the%20privacy%20policies%20of%20Microsoft,%20please%20see%20http://privacy.microsoft.com/en-us/default.aspx.%0\A%0\d','Customer%20Feedback');">feedback</a> on this topic to Microsoft.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.  All rights reserved.</a></p></span></div></div></body></html>