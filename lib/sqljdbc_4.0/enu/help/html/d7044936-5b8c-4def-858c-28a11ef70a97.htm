<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Using Basic Data Types</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="basic data types" /><meta name="Microsoft.Help.Id" content="d7044936-5b8c-4def-858c-28a11ef70a97" /><meta name="Description" content="The Microsoft JDBC Driver for SQL Server uses the JDBC basic data types to convert the SQL Server data types to a format that can be understood by the Java programming language, and vice versa. The JDBC driver provides support for the JDBC 4." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Using Basic Data Types</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>The Microsoft JDBC Driver for SQL Server uses the JDBC basic data types to convert the SQL Server data types to a format that can be understood by the Java programming language, and vice versa. The JDBC driver provides support for the JDBC 4.0 API, which includes the <span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span> data type, and National (Unicode) data types, such as <span sdata="langKeyword" value="NCHAR"><span class="keyword">NCHAR</span></span>, <span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span>, <span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span>, and <span sdata="langKeyword" value="NCLOB"><span class="keyword">NCLOB</span></span>.</p></div><h1 class="heading">Data Type Mappings</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>The following table lists the default mappings between the basic SQL Server, JDBC, and Java programming language data types:</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>SQL Server Types</p></th><th><p>JDBC Types (java.sql.Types)</p></th><th><p>Java Language Types</p></th></tr><tr><td><p>bigint</p></td><td><p>BIGINT</p></td><td><p>long</p></td></tr><tr><td><p>binary</p></td><td><p>BINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>bit</p></td><td><p>BIT</p></td><td><p>boolean</p></td></tr><tr><td><p>char</p></td><td><p>CHAR</p></td><td><p>String</p></td></tr><tr><td><p>date</p></td><td><p>DATE</p></td><td><p>java.sql.Date</p></td></tr><tr><td><p>datetime</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>datetime2</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>datetimeoffset (2)</p></td><td><p>microsoft.sql.Types.DATETIMEOFFSET</p></td><td><p>microsoft.sql.DateTimeOffset</p></td></tr><tr><td><p>decimal</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>float</p></td><td><p>DOUBLE</p></td><td><p>double</p></td></tr><tr><td><p>image</p></td><td><p>LONGVARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>int</p></td><td><p>INTEGER</p></td><td><p>int</p></td></tr><tr><td><p>money</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>nchar</p></td><td><p>CHAR</p><p>NCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>ntext</p></td><td><p>LONGVARCHAR</p><p>LONGNVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>numeric</p></td><td><p>NUMERIC</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>nvarchar</p></td><td><p>VARCHAR</p><p>NVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>nvarchar(max)</p></td><td><p>VARCHAR</p><p>NVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>real</p></td><td><p>REAL</p></td><td><p>float</p></td></tr><tr><td><p>smalldatetime</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>smallint</p></td><td><p>SMALLINT</p></td><td><p>short</p></td></tr><tr><td><p>smallmoney</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>text</p></td><td><p>LONGVARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>time</p></td><td><p>TIME (1)</p></td><td><p>java.sql.Time (1)</p></td></tr><tr><td><p>timestamp</p></td><td><p>BINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>tinyint</p></td><td><p>TINYINT</p></td><td><p>short</p></td></tr><tr><td><p>udt</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>uniqueidentifier</p></td><td><p>CHAR</p></td><td><p>String</p></td></tr><tr><td><p>varbinary</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>varbinary(max)</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p /></td><td><p /></td><td><p /></td></tr><tr><td><p>varchar</p></td><td><p>VARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>varchar(max)</p></td><td><p>VARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>xml</p></td><td><p>LONGVARCHAR</p><p>LONGNVARCHAR (Java SE 6.0)</p></td><td><p>String</p><p>SQLXML</p></td></tr></table></div><p>(1) To use java.sql.Time with the time SQL Server type, you must set the <span sdata="langKeyword" value="sendTimeAsDatetime"><span class="keyword">sendTimeAsDatetime</span></span> connection property to false.</p><p>(2) You can programmatically access values of <span sdata="langKeyword" value="datetimeoffset"><span class="keyword">datetimeoffset</span></span> with <span sdata="link"><a href="20bbeacd-ccca-4a46-8184-ff941ae2ec5f.htm">DateTimeOffset Class</a></span>.</p><p>The SQL Server sqlvariant data type is not currently supported by the JDBC driver. If a query is used to retrieve data from a table that contains a column of the sqlvariant data type, an exception will occur.</p><p>The following sections provide examples of how you can use the JDBC Driver and the basic data types. For a more detailed example of how to use the basic data types in a Java application, see <span sdata="link"><a href="59ac80cf-fc66-4493-933d-38e479c5f54d.htm">Basic Data Types Sample</a></span>.</p></div><h1 class="heading">Retrieving Data as a String</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>If you have to retrieve data from a data source that maps to any of the JDBC basic data types for viewing as a string, or if strongly typed data is not required, you can use the <a href="f81dde01-d328-4b32-8871-1efac645b68e.htm">getString</a> method of the <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> class, as in the following:</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>String SQL = "SELECT TOP 10 * FROM Person.Contact";
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery(SQL);

while (rs.next()) {
   System.out.println(rs.getString(4) + " " + rs.getString(6));
}
rs.close();
stmt.close();

</pre></span></div></div></div><h1 class="heading">Retrieving Data by Data Type</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>If you have to retrieve data from a data source, and you know the type of data that is being retrieved, use one of the <b>get&lt;Type&gt;</b> methods of the <b>SQLServerResultSet</b> class, also known as the <span class="term">getter methods</span>. You can use either a column name or a column index with the <b>get&lt;Type&gt;</b> methods, as in the following:</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getShort("job_id");
rs.close();
stmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>The <b>getUnicodeStream</b> and <b>getBigDecimal</b> with scale methods are deprecated and are not supported by the JDBC driver.</p></div></div><h1 class="heading">Updating Data by Data Type</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>If you have to update the value of a field in a data source, use one of the <b>update&lt;Type&gt;</b> methods of the <b>SQLServerResultSet</b> class. In the following example, the <a href="2bb0319e-12cb-4604-a7e3-b22a24b02296.htm">updateInt</a> method is used in conjunction with the <a href="cfced0ca-a281-40dc-8d2f-370d5f0bf12b.htm">updateRow</a> method to update the data in the data source:</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); 
ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getInt(2);
empJobID++;
rs.first();
rs.updateInt(2, empJobID);
rs.updateRow();
rs.close();
stmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>The JDBC driver cannot update a SQL Server column with a column name that is more than 127 characters long. If an update to a column whose name is more than 127 characters is attempted, an exception is thrown.</p></div></div><h1 class="heading">Updating Data by Parameterized Query</h1><div id="sectionSection4" class="section" name="collapseableSection" style=""><p>If you have to update data in a data source by using a parameterized query, you can set the data type of the parameters by using one of the <b>set&lt;Type&gt;</b> methods of the <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> class, also known as the <span class="term">setter methods</span>. In the following example, the <a href="bd4e4085-f704-4a73-b6a7-7d443d564728.htm">prepareStatement</a> method is used to pre-compile the parameterized query, and then the <a href="25dabdc9-c60f-485a-87eb-306067964765.htm">setString</a> method is used to set the string value of the parameter before the <a href="ca534c6b-ef4d-4ae8-8cc3-514728623cff.htm">executeUpdate</a> method is called.</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>PreparedStatement pstmt = con.prepareStatement("UPDATE employee SET
   fname = ? WHERE (lname = 'Brown')");
String first = "Bob";
pstmt.setString(1, first);
int rowCount = pstmt.executeUpdate();
pstmt.close();

</pre></span></div></div><p>For more information about parameterized queries, see <span sdata="link"><a href="3202b88f-ce13-44dd-982c-c6a3b0260378.htm">Using an SQL Statement with Parameters</a></span>.</p></div><h1 class="heading">Passing Parameters to a Stored Procedure</h1><div id="sectionSection5" class="section" name="collapseableSection" style=""><p>If you have to pass typed parameters into a stored procedure, you can set the parameters by index or name by using one of the <b>set&lt;Type&gt;</b> methods of the <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> class. In the following example, the <a href="265b024c-898a-4bd0-98b5-f06076717b9e.htm">prepareCall</a> method is used to set up the call to the stored procedure, and then the <a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a> method is used to set the parameter for the call before the <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a> method is called. </p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid(?)}");
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
rs.close();
cstmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>In this example, a result set is returned with the results of running the stored procedure. </p></div><p>For more information about using the JDBC driver with stored procedures and input parameters, see <span sdata="link"><a href="8f491b70-7d1b-42bd-964f-9a8b86af5eaa.htm">Using a Stored Procedure with Input Parameters</a></span>.</p></div><h1 class="heading">Retrieving Parameters from a Stored Procedure</h1><div id="sectionSection6" class="section" name="collapseableSection" style=""><p>If you have to retrieve parameters back from a stored procedure, you must first register an out parameter by name or index by using the <a href="82f8d608-efc1-4af8-a985-ec25d19420aa.htm">registerOutParameter</a> method of the <b>SQLServerCallableStatement</b> class, and then assign the returned out parameter to an appropriate variable after you run the call to the stored procedure. In the following example, the <b>prepareCall</b> method is used to set up the call to the stored procedure, the <b>registerOutParameter</b> method is used to set up the out parameter, and then the <a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a> method is used to set the parameter for the call before <b>executeQuery</b> method is called. The value that is returned by the out parameter of the stored procedure is retrieved by using the <a href="9e3c51bc-7285-4f28-92c8-cfa05e49da9e.htm">getShort</a> method.</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid (?, ?)}");
cstmt.registerOutParameter(2, java.sql.Types.SMALLINT);
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
short empJobID = cstmt.getShort(2);
rs.close();
cstmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>In addition to the returned out parameter, a result set might also be returned with the results of running the stored procedure.</p></div><p>For more information about how to use the JDBC driver with stored procedures and output parameters, see <span sdata="link"><a href="1c006f27-7e99-43d5-974c-7b782659290c.htm">Using a Stored Procedure with Output Parameters</a></span>.</p></div><span id="seeAlsoSpan"><h1 class="heading">See Also</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">Understanding the JDBC Driver Data Types</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Send <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','01.00.12024.10000','%0\dThank%20you%20for%20your%20feedback.%20The%20developer%20writing%20teams%20use%20your%20feedback%20to%20improve%20documentation.%20While%20we%20are%20reviewing%20your%20feedback,%20we%20may%20send%20you%20e-mail%20to%20ask%20for%20clarification%20or%20feedback%20on%20a%20solution.%20We%20do%20not%20use%20your%20e-mail%20address%20for%20any%20other%20purpose%20and%20we%20delete%20it%20after%20we%20finish%20our%20review.%0\AFor%20further%20information%20about%20the%20privacy%20policies%20of%20Microsoft,%20please%20see%20http://privacy.microsoft.com/en-us/default.aspx.%0\A%0\d','Customer%20Feedback');">feedback</a> on this topic to Microsoft.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.  All rights reserved.</a></p></span></div></div></body></html>